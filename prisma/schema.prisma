// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String
  accessToken        String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User      @relation(fields: [userId], references: [id])
}

model Session {
  id           String    @id @default(cuid())
  userId       String
  expires      DateTime?
  sessionToken String    @unique
  accessToken  String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  userId        String        @unique
  imageUrl      String?
  login         String?
  password      String?
  token         String?       @default(uuid())
  assistants    Assistant[]
  integrations  Integration[]
  chats         Chat[]
  clients       Client[]
  expires_in    DateTime?     @default(now())

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Account         Account[]
  Session         Session[]
  Quiz            Quiz[]
  TelegramBot     TelegramBot[]
  TelegramUserBot TelegramUserBot[]
  WhatsAppBot     WhatsAppBot[]
  JivoBot         JivoBot[]
  Message         Message[]

  ownedManagers Manager[] @relation("OwnedManagers")
  managedBy     Manager[] @relation("ManagedManagers")
}

model VerificationRequest {
  id         String    @id @default(cuid())
  identifier String
  token      String    @unique
  expires    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Quiz {
  id              String   @id @default(uuid())
  userId          String
  companyName     String?
  companyCategory String?
  aiGoals         String?
  aiRole          String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  User            User     @relation(fields: [userId], references: [id])
}

model Task {
  id        String   @id @default(uuid())
  userId    String
  managerId String
  stage     String?
  text      String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Manager   Manager  @relation(fields: [managerId], references: [id])
}

model Deal {
  id        String   @id @default(uuid())
  userId    String
  managerId String
  amount    Int?
  stage     String?
  text      String?
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Manager   Manager  @relation(fields: [managerId], references: [id])
}

model Assistant {
  id              String            @id @default(uuid())
  userId          String
  name            String?
  comment         String?
  settings        String?
  imageUrl        String?
  use_count       Int               @default(0)
  access_token    String            @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  User            User              @relation(fields: [userId], references: [id])
  integrations    Integration[]
  chats           Chat[]
  TelegramBot     TelegramBot[]
  TelegramUserBot TelegramUserBot[]
  WhatsAppBot     WhatsAppBot[]
  JivoBot         JivoBot[]
  Message         Message[]
}

model TelegramBot {
  id          String     @id @default(uuid())
  name        String?
  telegramId  String?
  imageUrl    String?
  useCount    Int        @default(0)
  token       String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assistantId String?
  Assistant   Assistant? @relation(fields: [assistantId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model TelegramUserBot {
  id          String     @id @default(uuid())
  firstName   String?
  lastName    String?
  username    String?
  imageUrl    String?
  useCount    Int        @default(0)
  phone       String?
  apiId       String?
  apiHash     String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assistantId String?
  Assistant   Assistant? @relation(fields: [assistantId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model WhatsAppBot {
  id               String     @id @default(uuid())
  name             String?
  settings         String?
  imageUrl         String?
  useCount         Int        @default(0)
  fullName         String?
  phone            String?
  IdInstance       String?
  ApiTokenInstance String?
  userId           String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  assistantId      String?
  Assistant        Assistant? @relation(fields: [assistantId], references: [id])
  User             User       @relation(fields: [userId], references: [id])
}

model JivoBot {
  id          String     @id @default(uuid())
  name        String?
  settings    String?
  imageUrl    String?
  useCount    Int        @default(0)
  providerId  String?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assistantId String?
  Assistant   Assistant? @relation(fields: [assistantId], references: [id])
  User        User       @relation(fields: [userId], references: [id])
}

model Client {
  id          String   @id @default(uuid())
  userId      String
  managerId   String
  chatId      String
  name        String?
  username    String?
  imageUrl    String?
  category    String?
  email       String?
  phone       String?
  about       String?
  companyName String?
  tags        String?
  InServiceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id])
  manager     Manager  @relation(fields: [managerId], references: [id])
  chats       Chat[]
}

model Manager {
  id        String @id @default(uuid())
  ownerId   String
  managerId String

  managedById   String
  tasks         Task[]
  deals         Deal[]
  clients       Client[]
  chats         Chat[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  owner         User         @relation("OwnedManagers", fields: [ownerId], references: [id]) // Связь с владельцем
  manager       User         @relation("ManagedManagers", fields: [managedById], references: [id]) // Связь с менеджером
  Message       Message[]
  Integration   Integration? @relation(fields: [integrationId], references: [id])
  integrationId String?
}

model Chat {
  id                String       @id @default(uuid())
  userId            String
  managerId         String
  clientId          String       @unique
  assistantId       String
  integrationId     String
  isBlocked         Boolean      @default(false)
  isAssistantInChat Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  User              User         @relation(fields: [userId], references: [id])
  manager           Manager      @relation(fields: [managerId], references: [id])
  client            Client       @relation(fields: [clientId], references: [id])
  assistant         Assistant    @relation(fields: [assistantId], references: [id])
  integration       Integration? @relation(fields: [integrationId], references: [id])
  Message           Message[]
}

model Message {
  id            String    @id @default(uuid())
  chatId        String
  text          String?
  filesUrl      String?
  imagesUrl     String?
  incoming      Boolean   @default(true)
  fromAssistant Boolean   @default(false)
  fromUser      Boolean   @default(false)
  fromManager   Boolean   @default(false)
  managerId     String
  userId        String
  assistantId   String
  isRead        Boolean   @default(false)
  timestamp     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Chat          Chat      @relation(fields: [chatId], references: [id])
  manager       Manager   @relation(fields: [managerId], references: [id])
  User          User      @relation(fields: [userId], references: [id])
  Assistant     Assistant @relation(fields: [assistantId], references: [id])
}

model Integration {
  id          String     @id @default(uuid())
  userId      String
  serviceType String
  serviceId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User       @relation(fields: [userId], references: [id])
  assistant   Assistant? @relation(fields: [assistantId], references: [id])
  assistantId String?
  chats       Chat[]
  managers    Manager[]
}
