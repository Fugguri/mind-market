// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Account model
model Account {
  id                 String    @id @default(cuid())
  userId             String    @unique
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String
  accessToken        String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  User               User      @relation(fields: [userId], references: [id])
}

// Session model
model Session {
  id           String    @id @default(cuid())
  userId       String    @unique
  expires      DateTime?
  sessionToken String    @unique
  accessToken  String    @unique
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id])
}

// VerificationRequest model
model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// User model
model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  userId           String    @unique
  imageUrl         String?
  login            String?
  password         String
  token            String    @default(uuid())
  apiKey           String    @default(uuid())
  job_title        String?
  companyName      String?
  phone_number     String?
  telegram         String?
  subscription_end DateTime?
  expires          DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  Project          Project[] // Reverse relation
  Account          Account[] // Reverse relation
  Session          Session[] // Reverse relation
  Manager          Manager[]
}

// Project model
model Project {
  id              String            @id @default(uuid())
  name            String
  ownerId         String
  owner           User              @relation(fields: [ownerId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Manager         Manager[] // Reverse relation
  Assistant       Assistant[] // Reverse relation
  Integration     Integration[] // Reverse relation
  Chats           Chat[] // Reverse relation
  Client          Client[] // Reverse relation
  Quiz            Quiz[] // Reverse relation
  Deals           Deal[] // Reverse relation
  Tasks           Task[] // Reverse relation
  WhatsAppBot     WhatsAppBot[] // Reverse relation
  TelegramUserBot TelegramUserBot[] // Reverse relation
  TelegramBot     TelegramBot[] // Reverse relation
  JivoBot         JivoBot[] // Reverse relation
}

// Assistant model
enum AssistantType {
  WEBPAGE
  DOCUMENTS
  BASE
  SMART
}

model Assistant {
  id           String        @id @default(uuid())
  projectId    String
  Project      Project       @relation(fields: [projectId], references: [id])
  name         String
  comment      String
  settings     String
  type         AssistantType @default(BASE)
  webSitesUrls String[]
  files        String[]
  imageUrl     String?
  use_count    Int           @default(0)
  access_token String        @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Integration  Integration[] // Reverse relation
  Chat         Chat[] // Reverse relation
}

// Integration model
model Integration {
  id           String    @id @default(uuid())
  ProjectId    String
  Project      Project   @relation(fields: [ProjectId], references: [id])
  service_type String
  service_id   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assistant_id String
  Assistant    Assistant @relation(fields: [assistant_id], references: [id])
  Chats        Chat[] // Reverse relation
}

// Chat model
model Chat {
  id                   String       @id @default(uuid())
  ProjectId            String
  Project              Project      @relation(fields: [ProjectId], references: [id])
  managerId            String?
  client_id            String
  assistant_id         String
  integrationId        String?
  is_blocked           Boolean      @default(false)
  is_assistant_in_chat Boolean      @default(true)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  Manager              Manager?     @relation(fields: [managerId], references: [id])
  Client               Client       @relation(fields: [client_id], references: [id])
  Assistant            Assistant?   @relation(fields: [assistant_id], references: [id])
  Integration          Integration? @relation(fields: [integrationId], references: [id])
  Messages             Message[] // Reverse relation
}

// Client model
model Client {
  id            String   @id @default(uuid())
  ProjectId     String
  Project       Project  @relation(fields: [ProjectId], references: [id])
  name          String?
  username      String?
  image_url     String?
  category      String?
  email         String?
  phone         String?
  about         String?
  companyName   String?
  tags          String?
  in_service_id String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  managerId     String?
  Manager       Manager? @relation(fields: [managerId], references: [id])
  Chats         Chat[]
}

// Manager model
model Manager {
  id             String    @id @default(uuid())
  ProjectId      String
  Project        Project   @relation(fields: [ProjectId], references: [id])
  role           String    @default("manager")
  userId         String
  User           User      @relation(fields: [userId], references: [id])
  integration_id String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Tasks          Task[] // Reverse relation
  Deals          Deal[] // Reverse relation
  Client         Client[] // Reverse relation
  Chat           Chat[] // Reverse relation
  Messages       Message[] // Reverse relation
}

// Message model
model Message {
  id             String   @id @default(uuid())
  chat_id        String
  text           String?
  files_url      String?
  images_url     String?
  incoming       Boolean  @default(true)
  from_assistant Boolean  @default(false)
  from_user      Boolean  @default(false)
  from_manager   Boolean  @default(false)
  managerId      String?
  assistant_id   String?
  is_read        Boolean  @default(false)
  timestamp      DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Chat           Chat     @relation(fields: [chat_id], references: [id])
  Manager        Manager? @relation(fields: [managerId], references: [id])
}

// JivoBot model
model JivoBot {
  id           String   @id @default(uuid())
  projectId    String
  Project      Project  @relation(fields: [projectId], references: [id])
  assistant_id String
  provider_id  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// TelegramBot model
model TelegramBot {
  id                          String   @id @default(uuid())
  projectId                   String
  Project                     Project  @relation(fields: [projectId], references: [id])
  assistantId                 String
  botToken                    String
  telegram_id                 BigInt
  is_bot                      Boolean  @default(true)
  first_name                  String
  username                    String
  can_join_groups             Boolean  @default(true)
  can_read_all_group_messages Boolean  @default(false)
  supports_inline_queries     Boolean  @default(false)
  startMessage                String   @db.Text
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
}

// TelegramUserBot model
model TelegramUserBot {
  id           String   @id @default(uuid())
  projectId    String
  Project      Project  @relation(fields: [projectId], references: [id])
  assistant_id String
  provider_id  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// WhatsAppBot model
model WhatsAppBot {
  id           String   @id @default(uuid())
  projectId    String
  Project      Project  @relation(fields: [projectId], references: [id])
  assistant_id String
  provider_id  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Task model
model Task {
  id        String   @id @default(uuid())
  projectId String
  Project   Project  @relation(fields: [projectId], references: [id])
  stage     String
  text      String
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  managerId String
  Manager   Manager  @relation(fields: [managerId], references: [id])
}

// Quiz model
model Quiz {
  id        String  @id @default(uuid())
  projectId String
  Project   Project @relation(fields: [projectId], references: [id])
}

// Deal model
model Deal {
  id        String  @id @default(uuid())
  projectId String
  Project   Project @relation(fields: [projectId], references: [id])
  managerId String
  Manager   Manager @relation(fields: [managerId], references: [id])
}
